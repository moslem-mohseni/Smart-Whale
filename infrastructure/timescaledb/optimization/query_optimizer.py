import logging
from typing import List, Dict, Any, Optional
from infrastructure.timescaledb.storage.timescaledb_storage import TimescaleDBStorage
from infrastructure.timescaledb.optimization.cache_manager import CacheManager

logger = logging.getLogger(__name__)


class QueryOptimizer:
    """ØªØ­Ù„ÛŒÙ„ Ùˆ Ø¨Ù‡ÛŒÙ†Ù‡â€ŒØ³Ø§Ø²ÛŒ Ú©ÙˆØ¦Ø±ÛŒâ€ŒÙ‡Ø§ÛŒ TimescaleDB"""

    def __init__(self, storage: TimescaleDBStorage, cache_manager: CacheManager):
        """
        Ù…Ù‚Ø¯Ø§Ø±Ø¯Ù‡ÛŒ Ø§ÙˆÙ„ÛŒÙ‡

        Args:
            storage (TimescaleDBStorage): Ø´ÛŒØ¡ Ø°Ø®ÛŒØ±Ù‡â€ŒØ³Ø§Ø²ÛŒ Ø¨Ø±Ø§ÛŒ Ø§Ø¬Ø±Ø§ÛŒ Ú©ÙˆØ¦Ø±ÛŒâ€ŒÙ‡Ø§
            cache_manager (CacheManager): Ù…Ø¯ÛŒØ±ÛŒØª Ú©Ø´ Ø¨Ø±Ø§ÛŒ Ø°Ø®ÛŒØ±Ù‡ ØªØ­Ù„ÛŒÙ„â€ŒÙ‡Ø§ÛŒ Ù‚Ø¨Ù„ÛŒ
        """
        self.storage = storage
        self.cache_manager = cache_manager

    async def analyze_query(self, query: str, params: Optional[List[Any]] = None) -> Dict[str, Any]:
        """
        ØªØ­Ù„ÛŒÙ„ Ú©ÙˆØ¦Ø±ÛŒ Ø¨Ø§ `EXPLAIN ANALYZE`

        Args:
            query (str): Ù…ØªÙ† Ú©ÙˆØ¦Ø±ÛŒ SQL
            params (Optional[List[Any]]): Ù¾Ø§Ø±Ø§Ù…ØªØ±Ù‡Ø§ÛŒ Ú©ÙˆØ¦Ø±ÛŒ (Ø¯Ø± ØµÙˆØ±Øª Ù†ÛŒØ§Ø²)

        Returns:
            Dict[str, Any]: Ù†ØªØ§ÛŒØ¬ ØªØ­Ù„ÛŒÙ„ Ú©ÙˆØ¦Ø±ÛŒ
        """
        cache_key = f"query_analysis:{query}"
        cached_result = await self.cache_manager.get_cached_result(cache_key)

        if cached_result:
            logger.info(f"âš¡ ØªØ­Ù„ÛŒÙ„ Ú©Ø´ Ø´Ø¯Ù‡ Ø¨Ø±Ø§ÛŒ Ú©ÙˆØ¦Ø±ÛŒ `{query}` Ø¨Ø§Ø²ÛŒØ§Ø¨ÛŒ Ø´Ø¯.")
            return cached_result

        analyze_query = f"EXPLAIN ANALYZE {query}"
        result = await self.storage.execute_query(analyze_query, params)

        analysis = {"query": query, "analysis": result}
        await self.cache_manager.cache_result(cache_key, analysis, ttl=600)

        logger.info(f"ðŸ“Š ØªØ­Ù„ÛŒÙ„ Ø¬Ø¯ÛŒØ¯ Ø¨Ø±Ø§ÛŒ Ú©ÙˆØ¦Ø±ÛŒ `{query}` Ø§Ù†Ø¬Ø§Ù… Ø´Ø¯ Ùˆ Ú©Ø´ Ø´Ø¯.")
        return analysis

    async def suggest_indexes(self, table: str) -> List[str]:
        """
        Ù¾ÛŒØ´Ù†Ù‡Ø§Ø¯ Ø§ÛŒÙ†Ø¯Ú©Ø³â€ŒÙ‡Ø§ÛŒ Ù…Ù†Ø§Ø³Ø¨ Ø¨Ø± Ø§Ø³Ø§Ø³ ØªØ­Ù„ÛŒÙ„ Ø¬Ø¯ÙˆÙ„

        Args:
            table (str): Ù†Ø§Ù… Ø¬Ø¯ÙˆÙ„

        Returns:
            List[str]: Ù„ÛŒØ³ØªÛŒ Ø§Ø² Ù¾ÛŒØ´Ù†Ù‡Ø§Ø¯Ø§Øª Ø§ÛŒÙ†Ø¯Ú©Ø³
        """
        cache_key = f"index_suggestions:{table}"
        cached_indexes = await self.cache_manager.get_cached_result(cache_key)

        if cached_indexes:
            logger.info(f"âš¡ Ù¾ÛŒØ´Ù†Ù‡Ø§Ø¯Ø§Øª Ú©Ø´ Ø´Ø¯Ù‡ Ø§ÛŒÙ†Ø¯Ú©Ø³ Ø¨Ø±Ø§ÛŒ `{table}` Ø¨Ø§Ø²ÛŒØ§Ø¨ÛŒ Ø´Ø¯.")
            return cached_indexes

        index_suggestions = []
        query = f"""
            SELECT attname AS column_name, null_frac, n_distinct
            FROM pg_stats
            WHERE tablename = '{table}';
        """
        stats = await self.storage.execute_query(query)

        for stat in stats:
            column = stat["column_name"]
            null_frac = stat["null_frac"]
            n_distinct = stat["n_distinct"]

            if null_frac > 0.3:  # Ø§Ú¯Ø± Ø¯Ø±ØµØ¯ Ù…Ù‚Ø§Ø¯ÛŒØ± Null Ø²ÛŒØ§Ø¯ Ø¨Ø§Ø´Ø¯
                index_suggestions.append(f"CREATE INDEX IF NOT EXISTS idx_{table}_{column} ON {table} ({column}) WHERE {column} IS NOT NULL;")
            elif abs(n_distinct) > 1000:  # Ø§Ú¯Ø± ØªØ¹Ø¯Ø§Ø¯ Ù…Ù‚Ø§Ø¯ÛŒØ± ÛŒÚ©ØªØ§ Ø²ÛŒØ§Ø¯ Ø¨Ø§Ø´Ø¯
                index_suggestions.append(f"CREATE INDEX IF NOT EXISTS idx_{table}_{column} ON {table} ({column});")

        await self.cache_manager.cache_result(cache_key, index_suggestions, ttl=3600)
        logger.info(f"ðŸ“Œ Ù¾ÛŒØ´Ù†Ù‡Ø§Ø¯Ø§Øª Ø§ÛŒÙ†Ø¯Ú©Ø³ Ø¨Ø±Ø§ÛŒ `{table}` Ù…Ø­Ø§Ø³Ø¨Ù‡ Ùˆ Ú©Ø´ Ø´Ø¯.")
        return index_suggestions
