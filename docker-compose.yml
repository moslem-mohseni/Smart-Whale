services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    volumes:
      - .:/app
      - ./storage/logs/app:/app/logs
      - ./storage/shared/tmp:/app/tmp
      - ./storage/shared/uploads:/app/uploads
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai_network

  timescaledb:
    image: timescale/timescaledb:latest-pg13
    ports:
      - "${TIMESCALEDB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${TIMESCALEDB_USER:-user}
      - POSTGRES_PASSWORD=${TIMESCALEDB_PASSWORD:-password}
      - POSTGRES_DB=${TIMESCALEDB_DATABASE:-aidb}
    volumes:
      - ./storage/shared/db/timescaledb:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALEDB_USER:-user} -d ${TIMESCALEDB_DATABASE:-aidb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  redis:
    image: redis:6.2-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - ./storage/shared/cache/redis:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - ./storage/shared/kafka/zookeeper:/var/lib/zookeeper/data
    networks:
      - ai_network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID:-1}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT:-zookeeper:2181}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS:-PLAINTEXT://kafka:9092}
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:-1}
    volumes:
      - ./storage/shared/kafka/data:/var/lib/kafka/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ai_network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "${CLICKHOUSE_PORT:-9000}:9000"
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-default}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-ClickHouse_SecurePassword123}
      - CLICKHOUSE_DB=${CLICKHOUSE_DATABASE:-analytics_db}
    volumes:
      - ./storage/shared/db/clickhouse:/var/lib/clickhouse
      - ./storage/config/clickhouse:/etc/clickhouse-server/config.d
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_network

  milvus:
    image: milvusdb/milvus:latest
    ports:
      - "${MILVUS_PORT:-19530}:19530"
    environment:
      - ETCD_HOST=etcd
      - MINIO_ADDRESS=minio:9000
    volumes:
      - ./storage/shared/db/milvus:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai_network

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./storage/shared/db/etcd:/etcd
    networks:
      - ai_network

  minio:
    image: minio/minio:latest
    ports:
      - "9010:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-SmartWhaleMinioKey}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-SmartWhaleMinioSecret123}
    volumes:
      - ./storage/shared/db/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai_network

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: smart_whale-prometheus-1
    ports:
      - "${PROMETHEUS_PORT:-8090}:9090"
    volumes:
      - ./storage/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./storage/monitoring/prometheus:/prometheus
    restart: unless-stopped
    depends_on:
      - app
      - redis
      - timescaledb
    networks:
      - ai_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "6504:6505"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./storage/monitoring/grafana:/var/lib/grafana
      - ./storage/config/grafana/provisioning:/etc/grafana/provisioning
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - ai_network

networks:
  ai_network:
    driver: bridge
